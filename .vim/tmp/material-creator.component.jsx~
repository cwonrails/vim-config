'use strict';

import React from 'react';
import AboutStep from './about-step/about-step.component.jsx';
import FileUploadStep from './file-upload-step/file-upload-step.component.jsx';
import QuestionStep from './question-step/question-step.component.jsx';
import {diff} from '../list-view-page/utils/utils.js';
import styles from './material-creator.scss';
import RaisedButton from 'material-ui/RaisedButton';
import FlatButton from 'material-ui/FlatButton';
import {
  Stepper,
  Step,
  StepLabel
} from 'material-ui/Stepper';
import Paper from 'material-ui/Paper';

export default class MaterialCreator extends React.Component {
  constructor(props) {
    super(props);

    let material = (props.edit)
      ? {...props.material}
      : {};
    this.state = {
      tempMaterial: material,
      stepIndex: 0
    };
  }

  static propTypes = {
    material: React.PropTypes.object,
    edit: React.PropTypes.bool,
    delete: React.PropTypes.func,
    type: React.PropTypes.string,
    save: React.PropTypes.func
  };

  static defaultProps = {
    edit: false
  };

  handleChange = (field, value) => {
    let newMaterial = this.state.tempMaterial;

    newMaterial[field] = value;

    this.setState({
      tempMaterial: newMaterial
    });
  };

  handleCancel = () => {
    this.setState({
      tempMaterial: {...this.props.material}
    });
  };

  handleSave = () => {
    let changes = diff(this.props.material, this.state.tempMaterial);
    this.props.save(changes, (err) => {
      // should show loading and disable buttons
      // while saving
    });
  };

  handleNextStep = () => {
    if (this.state.stepIndex <= 2) {
      this.setState({
        stepIndex: this.state.stepIndex + 1
      });
    }
  };

  handleBackStep = () => {
    if (this.state.stepIndex >= 0) {
      this.setState({
        stepIndex: this.state.stepIndex - 1
      });
    }
  };

  getControls = (material) => {
    let mode = (this.props.edit)
      ? 'Edit:'
      : 'Create:';

    return (
      <div className={styles.controls}>
        <div className={styles.header}>
          <span className={styles.mode}>
            {mode}
          </span>
          <span className={styles.title}>
            {material.title}
          </span>
        </div>
        <div className={styles.saveControls}>
          <FlatButton
            label='Cancel'
            onTouchTap={this.handleCancel} />
          <RaisedButton
            label='Save'
            primary={true}
            onTouchTap={this.handleSave} />
        </div>
        <div className={styles.backNextControls}>
          <FlatButton
            label='Back'
            primary={true}
            onTouchTap={this.handleBackStep} />
          <FlatButton
            label='Next'
            primary={true}
            onTouchTap={this.handleNextStep} />
        </div>
      </div>
    );
  };

  getStepper = (material) => {
    return (
      <Stepper
        activeStep={this.state.stepIndex}
        className={styles.stepper}>
        <Step>
          <StepLabel>
            About {material.title}
          </StepLabel>
        </Step>
        <Step>
          <StepLabel>
            {material.title} Assessments
          </StepLabel>
        </Step>
        <Step>
          <StepLabel>
						Chapters/File Upload
          </StepLabel>
        </Step>
      </Stepper>
    );
  };

  getChild = (material) => {
    if (this.state.stepIndex === 0) {
      return <AboutStep
        material={material}
        edit={this.props.edit}
        type={this.props.type}
        changeVersion={this.props.changeVersion}
        onChange={this.handleChange}
        addTagAction={this.props.addTagAction}
        searchTags={this.props.searchTags}
        sourceTags={this.props.sourceTags}
        addViewFilterAction={this.props.addViewFilterAction}
        searchViewFilters={this.props.searchViewFilters}
        sourceViewFilters={this.props.sourceViewFilters}
        addExemptionFilterAction={this.props.addExemptionFilterAction}
        searchExemptionFilters={this.props.searchExemptionFilters}
        sourceExemptionFilters={this.props.sourceExemptionFilters}
        searchAdmins={this.props.searchAdmins}
        sourceAdmins={this.props.sourceAdmins}
        uploadProfilePic={this.props.uploadProfilePic} />;
    }
    if (this.state.stepIndex === 1) {
      return <QuestionStep
        questionList={this.props.material.questionList}
        edit={this.props.edit}
        onChange={this.handleChange} />;
    }
    if (this.state.stepIndex === 2) {
      return <FileUploadStep
        url={this.props.material.url}
        edit={this.props.edit}
        type={this.props.type}
        onChange={this.handleChange} />;
    }

    return '';
  };

  render = () => {
    return (
      <div className={styles.root}>
        {this.getControls(this.state.tempMaterial) }
        {this.getStepper(this.state.tempMaterial) }
        <Paper className={styles.child}>
          {this.getChild(this.state.tempMaterial) }
        </Paper>
      </div>
    );
  }
}
